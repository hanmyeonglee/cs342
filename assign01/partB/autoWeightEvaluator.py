from pwn import process
import os
import re

betterEval = """
def %s(currentGameState):
  INF = float('inf')
  epsilon = 0.01

  score = currentGameState.getScore()
  
  pacmanPos = currentGameState.getPacmanPosition()
  capsulesPos = currentGameState.getCapsules()
  foodsPos = currentGameState.getFood().asList()
  scaredGhosts = [ghost for ghost in currentGameState.getGhostStates() if ghost.scaredTimer >= 1]
  ghosts = [ghost for ghost in currentGameState.getGhostStates() if not ghost.scaredTimer]

  foodDists = [INF, *(manhattanDistance(pacmanPos, foodPos) for foodPos in foodsPos)]
  capsuleDists = [INF, *(manhattanDistance(pacmanPos, capPos) for capPos in capsulesPos)]
  scaredGhostDists = [INF, *(manhattanDistance(pacmanPos, ghost.getPosition()) for ghost in scaredGhosts)]
  ghostDists = [INF, *(manhattanDistance(pacmanPos, ghost.getPosition()) for ghost in ghosts)]

  minFoodDist = min(foodDists) + epsilon
  minCapsuleDist = min(capsuleDists) + epsilon
  minScaredGhostDist = min(scaredGhostDists) + epsilon
  minGhostDist = min(ghostDists) + epsilon

  features = [1 / minFoodDist, 1 / minScaredGhostDist, score, len(foodsPos), len(capsulesPos)]
  weights = [%d, %d, %d, %d, %d]

  if not scaredGhosts:
    features.append(1 / minCapsuleDist)
    weights.append(%d)
  
  finalScore = sum(map(lambda x: x[0] * x[1], zip(features, weights)))

  return finalScore
"""

def get_modifiers(modify_level):
    def modifier(weight):
        return weight * modify_level

    return modifier

W = [9, 165, 1.3125, -9, -800, 550]

titlePrefix = "betterEvalForMeasure"
normalModifiers = [get_modifiers(i) for i in range(3)]
smallNormalModifiers = [get_modifiers(i / 100) for i in range(75, 126, 5)]
tinyNormalModifiers = [get_modifiers(i / 10000) for i in range(9000, 11001, 25)]
confs = [
    {
        "title": f"{titlePrefix}FoodDistInfluence",
        "weightModifiers": tinyNormalModifiers
    },
    {
        "title": f"{titlePrefix}ScaredGhostDistInfluence",
        "weightModifiers": tinyNormalModifiers
    },
    {
        "title": f"{titlePrefix}ScoreInfluence",
        "weightModifiers": tinyNormalModifiers
    },
    {
        "title": f"{titlePrefix}NumFoodInfluence",
        "weightModifiers": tinyNormalModifiers
    },
    {
        "title": f"{titlePrefix}NumCapsuleInfluence",
        "weightModifiers": tinyNormalModifiers
    },
    {
        "title": f"{titlePrefix}CapsuleDistInfluence",
        "weightModifiers": tinyNormalModifiers
    }
]

dir = "/mnt/c/Users/ejong/Workspace/POSTECH/cs342/assign01/assign01"
os.chdir(dir)
for i, conf in enumerate(confs):
    title, weightModifiers = conf['title'], conf['weightModifiers']

    titles = []
    functions = []
    for j, modifier in enumerate(conf.get('weightModifiers', [])):
        weights = [w for w in W]
        weights[i] = modifier(W[i])

        titles.append(title + str(j))
        functions.append(betterEval % (title + str(j), *weights))
    
    with open(f"autoGeneratedBetterEval.py", "w") as f:
        f.write("from util import manhattanDistance\n")
        f.write("\n\n".join(functions))
        f.flush()

    ORIGINAL_CODE = ""
    with open(f"submission.py", "r") as f:
        ORIGINAL_CODE = f.read()
    
    with open(f"submission.py", "a") as f:
        f.write("from autoGeneratedBetterEval import " + ", ".join(titles) + "\n")
        for t in titles:
            f.write(f"{t} = {t}\n")
        f.flush()

    stats = []
    for t in titles:
        program = process(["python", "pacman.py", "-l", "smallClassic", "-p", "ExpectimaxAgent", "-a", f"evalFn={t}", "-q", "-n", "50"], cwd=dir)
        program.recvlines(numlines=50)
        stats.append((t, b''.join(program.recvlines(numlines=4, keepends=True)).decode()))
        program.close()
    
    for t, stat in stats:
        print('=' * 10 + t + '=' * 10)
        print(stat)
        print()

    with open(f"submission.py", "w") as f:
        f.write(ORIGINAL_CODE)
        f.flush()
